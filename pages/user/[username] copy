import { GetServerSideProps } from "next"
import { dehydrate, HydrationBoundary, QueryClient, useQuery } from '@tanstack/react-query'
import { UserDetailProps } from "@/types"
import { fetchUserDetails } from "@/lib/github"
import { Card, CardContent, CardHeader } from "@/components/ui/card"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { PageLayout } from "@/components/layout/page-layout"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { LoadingSpinner } from "@/components/loading-spinner"

function UserContent({ username }: { username: string }) {
  const { data: user, isLoading, isError, error } = useQuery({
    queryKey: ['userDetails', username],
    queryFn: () => fetchUserDetails(username),
    staleTime: 1000 * 60 * 5, // Consider data fresh for 5 minutes
    refetchOnMount: false, // Don't refetch on mount since we have SSR data
  })

  if (isLoading) {
    return (
      <PageLayout>
        <div className="flex items-center justify-center min-h-[50vh]">
          <LoadingSpinner />
        </div>
      </PageLayout>
    )
  }

  if (isError) {
    return (
      <PageLayout>
        <Alert variant="destructive">
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>
            {error instanceof Error ? error.message : "Failed to load user details"}
          </AlertDescription>
        </Alert>
      </PageLayout>
    )
  }

  if (!user) {
    return (
      <PageLayout>
        <Alert>
          <AlertTitle>User not found</AlertTitle>
          <AlertDescription>
            The user {username} could not be found.
          </AlertDescription>
        </Alert>
      </PageLayout>
    )
  }

  return (
    <PageLayout>
      <Card>
        <CardHeader className="flex flex-row items-center gap-4">
          <Avatar className="h-20 w-20">
            <AvatarImage src={user.avatar_url} alt={user.login} />
            <AvatarFallback>{user.login.slice(0, 2).toUpperCase()}</AvatarFallback>
          </Avatar>
          <div>
            <h1 className="text-2xl font-bold">{user.name || user.login}</h1>
            <p className="text-muted-foreground">@{user.login}</p>
          </div>
        </CardHeader>
        <CardContent className="space-y-4">
          {user.bio && (
            <p className="text-muted-foreground">{user.bio}</p>
          )}
          <div className="flex gap-4">
            <div>
              <span className="font-medium">{user.followers}</span>
              <span className="text-muted-foreground ml-1">followers</span>
            </div>
            <div>
              <span className="font-medium">{user.following}</span>
              <span className="text-muted-foreground ml-1">following</span>
            </div>
            <div>
              <span className="font-medium">{user.public_repos}</span>
              <span className="text-muted-foreground ml-1">repositories</span>
            </div>
          </div>
          {user.location && (
            <p className="text-muted-foreground">üìç {user.location}</p>
          )}
          {user.blog && (
            <a
              href={user.blog.startsWith('http') ? user.blog : `https://${user.blog}`}
              target="_blank"
              rel="noopener noreferrer"
              className="text-blue-500 hover:underline"
            >
              üîó {user.blog}
            </a>
          )}
        </CardContent>
      </Card>
    </PageLayout>
  )
}

export default function UserDetail({ username, userData }: UserDetailProps) {
  console.log("UserDetail component rendered with username:", username);
  console.log("User data:", userData);
  return (
    <HydrationBoundary state={userData}>
      <UserContent username={username} />
    </HydrationBoundary>
  )
}

// export const getServerSideProps: GetServerSideProps = async (context) => {
//   const username = context.params?.username as string;
//   const queryClient = new QueryClient();

//   try {
//     await queryClient.prefetchQuery({
//       queryKey: ['userDetails', username],
//       queryFn: () => fetchUserDetails(username)
//     });

//     return {
//       props: {
//         userData: dehydrate(queryClient),
//         username,
//       },
//     };
//   } catch (error) {
//     console.error("Error fetching user data:", error);
//     return {
//       notFound: true,
//     };
//   }
// }

export const getServerSideProps: GetServerSideProps = async (context) => {
  if (!context.params?.username) {
    console.error("No username provided in URL parameters")
    return { notFound: true }
  }

  const username = context.params.username as string
  const queryClient = new QueryClient()

  try {
    // Add logging to debug the API call
    console.log(`Fetching data for username: ${username}`)
    // const userData = await fetchUserDetails(username)
    const res = await queryClient.fetchQuery({
      queryKey: ['userDetails', username],
      queryFn: () => fetchUserDetails(username),
    })

    console.log("Fetched user data:", res)

    // if (!res) {
    //   console.error(`No user data found for username: ${username}`)
    //   return { notFound: true }
    // }

    queryClient.setQueryData(['userDetails', username], res)

    return {
      props: {
        username,
        userData: dehydrate(queryClient),
      },
    }
  } catch (error) {
    // More detailed error logging
    console.error("Error in getServerSideProps:", {
      message: error instanceof Error ? error.message : "Unknown error",
      username,
      error,
    })
    return { notFound: true }
  }
}
